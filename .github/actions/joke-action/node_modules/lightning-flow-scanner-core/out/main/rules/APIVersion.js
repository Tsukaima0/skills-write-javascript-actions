"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.APIVersion = void 0;
const core = __importStar(require("../internals/internals"));
const RuleCommon_1 = require("../models/RuleCommon");
class APIVersion extends RuleCommon_1.RuleCommon {
    constructor() {
        super({
            name: 'APIVersion',
            label: 'Outdated API Version',
            description: "Introducing newer API components may lead to unexpected issues with older versions of Flows, as they might not align with the underlying mechanics. Starting from API version 50.0, the 'Api Version' attribute has been readily available on the Flow Object. To ensure smooth operation and reduce discrepancies between API versions, it is strongly advised to regularly update and maintain them.",
            supportedTypes: core.FlowType.allTypes(),
            docRefs: [],
            isConfigurable: true,
            autoFixable: false
        });
    }
    execute(flow, options) {
        let flowAPIVersionNumber;
        if (flow.xmldata.apiVersion) {
            const flowAPIVersion = flow.xmldata.apiVersion;
            flowAPIVersionNumber = +flowAPIVersion;
        }
        if (flowAPIVersionNumber) {
            if (options && options.expression) {
                const expressionEvaluation = eval(flowAPIVersionNumber + options.expression);
                return (!expressionEvaluation ?
                    new core.RuleResult(this, [new core.ResultDetails(new core.FlowAttribute(!expressionEvaluation ? ('' + flowAPIVersionNumber) : undefined, "apiVersion", options.expression))]) :
                    new core.RuleResult(this, []));
            }
            else {
                return new core.RuleResult(this, []);
            }
        }
        else {
            return new core.RuleResult(this, [new core.ResultDetails(new core.FlowAttribute('API Version <49', "apiVersion", "<49"))]);
        }
    }
}
exports.APIVersion = APIVersion;
//# sourceMappingURL=APIVersion.js.map