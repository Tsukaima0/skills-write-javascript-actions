"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HardcodedId = void 0;
const IdPrefixes = __importStar(require("../data/IdPrefixes.json"));
const RuleCommon_1 = require("../models/RuleCommon");
const core = __importStar(require("../internals/internals"));
class HardcodedId extends RuleCommon_1.RuleCommon {
    constructor() {
        super({
            name: 'HardcodedId',
            label: 'Hardcoded Id',
            description: 'Avoid hard-coding IDs as they are org-specific. Instead, pass them into variables at the start of the flow. You can achieve this by utilizing merge fields in URL parameters or employing a Get Records element.',
            supportedTypes: core.FlowType.allTypes(),
            docRefs: [{ 'label': 'Flow Best Practices', 'path': 'https://help.salesforce.com/s/articleView?id=sf.flow_prep_bestpractices.htm&type=5' }, { 'label': "Don't hard code Record Type IDs in Flow. By Stephen Church.", 'path': 'https://www.linkedin.com/feed/update/urn:li:activity:6947530300012826624/?updateEntityUrn=urn%3Ali%3Afs_feedUpdate%3A%28V2%2Curn%3Ali%3Aactivity%3A6947530300012826624%29' }],
            isConfigurable: false,
            autoFixable: false
        });
    }
    execute(flow) {
        const prefixes = IdPrefixes.ids.map(prefix => {
            return prefix['Key Prefix'];
        });
        const nodesWithHardcodedIds = [];
        const customPrefixes = new Array(100);
        for (let i = 0; i < customPrefixes.length; i++) {
            const prefix = ('' + i).length === 1 ? 'a0' + String(i) : 'a' + String(i);
            prefixes.push(prefix);
        }
        for (const prefix of prefixes) {
            const match18charIds = new RegExp('\\b' + prefix + '\\w{15}\\b');
            const match15charIds = new RegExp('\\b' + prefix + '\\w{12}\\b');
            for (const node of flow.elements) {
                const nodeString = JSON.stringify(node);
                const hardcodedIdsL18 = nodeString.match(match18charIds);
                const hardcodedIdsL15 = nodeString.match(match15charIds);
                if (hardcodedIdsL15 || hardcodedIdsL18) {
                    nodesWithHardcodedIds.push(node);
                }
            }
        }
        let results = [];
        for (const det of nodesWithHardcodedIds) {
            results.push(new core.ResultDetails(det));
        }
        return new core.RuleResult(this, results);
    }
}
exports.HardcodedId = HardcodedId;
//# sourceMappingURL=HardcodedId.js.map