"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnconnectedElement = void 0;
const RuleCommon_1 = require("../models/RuleCommon");
const core = __importStar(require("../internals/internals"));
class UnconnectedElement extends RuleCommon_1.RuleCommon {
    constructor() {
        super({
            name: 'UnconnectedElement',
            label: 'Unconnected Element',
            description: "To maintain the efficiency and manageability of your Flow, it's best to avoid including unconnected elements that are not in use.",
            supportedTypes: [...core.FlowType.backEndTypes, ...core.FlowType.visualTypes],
            docRefs: [],
            isConfigurable: false,
            autoFixable: false
        });
    }
    execute(flow) {
        const connectedElements = new Set();
        // Callback function to log connected elements
        const logConnected = (element) => {
            connectedElements.add(element.name);
        };
        // Get Traversable Nodes
        const flowElements = flow.elements.filter(node => node instanceof core.FlowNode);
        // Find start of Flow
        const startIndex = this.findStart(flowElements);
        // Start traversal from the start node
        if (startIndex !== -1) {
            new core.Compiler().traverseFlow(flow, flowElements[startIndex].name, logConnected);
        }
        const unconnectedElements = flowElements.filter(element => !connectedElements.has(element.name));
        // Create result details
        const results = unconnectedElements.map(det => new core.ResultDetails(det));
        return new core.RuleResult(this, results);
    }
    findStart(nodes) {
        return nodes.findIndex(n => {
            return n.subtype === 'start';
        });
    }
}
exports.UnconnectedElement = UnconnectedElement;
//# sourceMappingURL=UnconnectedElement.js.map