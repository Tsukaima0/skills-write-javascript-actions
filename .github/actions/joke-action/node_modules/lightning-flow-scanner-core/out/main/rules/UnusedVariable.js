"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnusedVariable = void 0;
const RuleCommon_1 = require("../models/RuleCommon");
const core = __importStar(require("../internals/internals"));
class UnusedVariable extends RuleCommon_1.RuleCommon {
    constructor() {
        super({
            name: 'UnusedVariable',
            label: 'Unused Variable',
            description: "To maintain the efficiency and manageability of your Flow, it's advisable to avoid including unconnected variables that are not in use.",
            supportedTypes: [...core.FlowType.backEndTypes, ...core.FlowType.visualTypes],
            docRefs: [],
            isConfigurable: false,
            autoFixable: false
        });
    }
    execute(flow) {
        const unusedVariables = [];
        for (const variable of flow.elements.filter(node => node instanceof core.FlowVariable)) {
            const variableName = variable.name;
            if ([...JSON.stringify(flow.elements.filter(node => node instanceof core.FlowNode)).matchAll(new RegExp(variableName, 'gi'))].map(a => a.index).length === 0) {
                // if not found in any inside of flow elements
                if ([...JSON.stringify(flow.elements.filter(node => node instanceof core.FlowResource)).matchAll(new RegExp(variableName, 'gi'))].map(a => a.index).length === 0) {
                    const insideCounter = [...JSON.stringify(variable).matchAll(new RegExp(variable.name, 'gi'))].map(a => a.index);
                    const variableUsage = [...JSON.stringify(flow.elements.filter(node => node instanceof core.FlowVariable)).matchAll(new RegExp(variableName, 'gi'))].map(a => a.index);
                    // finally also checks indexes where name occurs in the variable itself and where name occurs in all variables
                    // when this is the same, variable must be unused.
                    if (variableUsage.length === insideCounter.length) {
                        unusedVariables.push(variable);
                    }
                }
            }
        }
        let results = [];
        for (const det of unusedVariables) {
            results.push(new core.ResultDetails(det));
        }
        return new core.RuleResult(this, results);
    }
}
exports.UnusedVariable = UnusedVariable;
//# sourceMappingURL=UnusedVariable.js.map