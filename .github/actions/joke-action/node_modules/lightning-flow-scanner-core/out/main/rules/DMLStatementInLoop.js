"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DMLStatementInLoop = void 0;
const RuleCommon_1 = require("../models/RuleCommon");
const core = __importStar(require("../internals/internals"));
class DMLStatementInLoop extends RuleCommon_1.RuleCommon {
    constructor() {
        super({
            name: 'DMLStatementInLoop',
            label: 'DML Statement In A Loop',
            description: "To prevent exceeding Apex governor limits, it is advisable to consolidate all your database operations, including record creation, updates, or deletions, at the conclusion of the flow.",
            supportedTypes: core.FlowType.backEndTypes,
            docRefs: [{ 'label': 'Flow Best Practices', 'path': 'https://help.salesforce.com/s/articleView?id=sf.flow_prep_bestpractices.htm&type=5' }],
            isConfigurable: false,
            autoFixable: false
        });
    }
    execute(flow) {
        const dmlStatementTypes = ['recordDeletes', 'recordUpdates', 'recordCreates'];
        const loopElements = flow.elements.filter(node => node.subtype === 'loops');
        const dmlStatementsInLoops = [];
        const findDML = (element) => {
            if (dmlStatementTypes.includes(element.subtype)) {
                dmlStatementsInLoops.push(element);
            }
        };
        for (const element of loopElements) {
            let loopEnd;
            // Check if 'noMoreValuesConnector' attribute exists
            if (element.element['noMoreValuesConnector'] && element.element['noMoreValuesConnector']) {
                loopEnd = element.element['noMoreValuesConnector'].targetReference;
            }
            else {
                loopEnd = element.name;
            }
            new core.Compiler().traverseFlow(flow, element.name, findDML, loopEnd);
        }
        // Create result details
        const results = dmlStatementsInLoops.map(det => new core.ResultDetails(det));
        return new core.RuleResult(this, results);
    }
}
exports.DMLStatementInLoop = DMLStatementInLoop;
//# sourceMappingURL=DMLStatementInLoop.js.map