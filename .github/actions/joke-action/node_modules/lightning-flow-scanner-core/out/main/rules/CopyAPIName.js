"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CopyAPIName = void 0;
const core = __importStar(require("../internals/internals"));
const RuleCommon_1 = require("../models/RuleCommon");
class CopyAPIName extends RuleCommon_1.RuleCommon {
    constructor() {
        super({
            name: 'CopyAPIName',
            label: 'Copy API Name',
            description: "Maintaining multiple elements with a similar name, like 'Copy_X_Of_Element,' can diminish the overall readability of your Flow. When copying and pasting these elements, it's crucial to remember to update the API name of the newly created copy.",
            supportedTypes: core.FlowType.allTypes(),
            docRefs: [],
            isConfigurable: false,
            autoFixable: false
        });
    }
    execute(flow) {
        const flowElements = flow.elements.filter(node => node instanceof core.FlowNode);
        const copyOfElements = [];
        for (const element of flowElements) {
            const copyOf = new RegExp('Copy_[0-9]+_of_[A-Za-z0-9]+').test(element.name);
            if (copyOf) {
                copyOfElements.push(element);
            }
        }
        let results = [];
        for (const det of copyOfElements) {
            results.push(new core.ResultDetails(det));
        }
        return new core.RuleResult(this, results);
    }
}
exports.CopyAPIName = CopyAPIName;
//# sourceMappingURL=CopyAPIName.js.map