"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoLayout = void 0;
const core = __importStar(require("../internals/internals"));
const RuleCommon_1 = require("../models/RuleCommon");
class AutoLayout extends RuleCommon_1.RuleCommon {
    constructor() {
        super({
            name: 'AutoLayout',
            label: 'Auto-Layout Mode',
            description: "With Canvas Mode set to Auto-Layout, Elements are spaced, connected, and aligned automatically, keeping your Flow neatly organized thus saving you time.",
            supportedTypes: core.FlowType.allTypes(),
            docRefs: [],
            isConfigurable: true,
            autoFixable: false
        });
    }
    execute(flow, options) {
        var _a;
        if (flow.processMetadataValues) {
            const CanvasMode = flow.xmldata.processMetadataValues.find(mdv => mdv.name === 'CanvasMode');
            const AutoLayout = CanvasMode.value && typeof CanvasMode.value === 'object' && CanvasMode.value.stringValue && CanvasMode.value.stringValue === "AUTO_LAYOUT_CANVAS";
            return (!AutoLayout ?
                new core.RuleResult(this, [new core.ResultDetails(new core.FlowAttribute((_a = CanvasMode.value) === null || _a === void 0 ? void 0 : _a.stringValue, "CanvasMode", '!== AUTO_LAYOUT_CANVAS'))]) :
                new core.RuleResult(this, []));
        }
    }
}
exports.AutoLayout = AutoLayout;
//# sourceMappingURL=AutoLayout.js.map