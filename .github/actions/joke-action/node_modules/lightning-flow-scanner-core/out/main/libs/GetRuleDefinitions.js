"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetRuleDefinitions = void 0;
const DefaultRuleStore_1 = require("../store/DefaultRuleStore");
const DynamicRule_1 = require("./DynamicRule");
const RuleLoader_1 = require("./RuleLoader");
function GetRuleDefinitions(ruleConfig) {
    const selectedRules = [];
    if (ruleConfig && ruleConfig instanceof Map) {
        for (const ruleName of ruleConfig.keys()) {
            let severity = 'error';
            try {
                const configuredPath = ruleConfig.get(ruleName)['path'];
                const configuredSeverity = ruleConfig.get(ruleName)['severity'];
                if (configuredSeverity && (configuredSeverity === "error" || configuredSeverity === "warning" || configuredSeverity === "note")) {
                    severity = configuredSeverity;
                }
                if (configuredPath) {
                    let customRule = RuleLoader_1.RuleLoader.loadCustomRule(ruleName, configuredPath);
                    selectedRules['severity'] = severity;
                    selectedRules.push(customRule);
                }
                else {
                    const matchedRule = new DynamicRule_1.DynamicRule(ruleName);
                    matchedRule['severity'] = severity;
                    selectedRules.push(matchedRule);
                }
            }
            catch (error) {
                console.log(error.message);
            }
        }
    }
    else {
        // tslint:disable-next-line:forin
        for (const rule in DefaultRuleStore_1.DefaultRuleStore) {
            const matchedRule = new DynamicRule_1.DynamicRule(rule);
            matchedRule['severity'] = 'error';
            selectedRules.push(matchedRule);
        }
    }
    return selectedRules;
}
exports.GetRuleDefinitions = GetRuleDefinitions;
//# sourceMappingURL=GetRuleDefinitions.js.map