"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScanFlows = void 0;
const GetRuleDefinitions_1 = require("./GetRuleDefinitions");
const core = __importStar(require("../../main/internals/internals"));
function ScanFlows(flows, ruleOptions) {
    const flowResults = [];
    let selectedRules = [];
    if (ruleOptions && ruleOptions.rules) {
        const ruleMap = new Map();
        for (const [ruleName, rule] of Object.entries(ruleOptions.rules)) {
            ruleMap.set(ruleName, rule);
        }
        selectedRules = (0, GetRuleDefinitions_1.GetRuleDefinitions)(ruleMap);
    }
    else {
        selectedRules = (0, GetRuleDefinitions_1.GetRuleDefinitions)();
    }
    for (const flow of flows) {
        const ruleResults = [];
        for (const rule of selectedRules) {
            try {
                if (rule.supportedTypes.includes(flow.type)) {
                    let config = undefined;
                    if (ruleOptions &&
                        ruleOptions["rules"] &&
                        ruleOptions["rules"][rule.name]) {
                        config = ruleOptions["rules"][rule.name];
                    }
                    const result = config && Object.keys(config).length > 0
                        ? rule.execute(flow, config)
                        : rule.execute(flow);
                    if (result.severity !== rule.severity) {
                        result.severity = rule.severity;
                    }
                    ruleResults.push(result);
                }
                else {
                    ruleResults.push(new core.RuleResult(rule, []));
                }
            }
            catch (error) {
                let message = "Something went wrong while executing " +
                    rule.name +
                    " in the Flow: '" +
                    flow.name;
                ruleResults.push(new core.RuleResult(rule, [], message));
            }
        }
        flowResults.push(new core.ScanResult(flow, ruleResults));
    }
    return flowResults;
}
exports.ScanFlows = ScanFlows;
//# sourceMappingURL=ScanFlows.js.map