"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Compiler = void 0;
const FlowNode_1 = require("../models/FlowNode");
class Compiler {
    constructor() {
        this.visitedElements = new Set();
    }
    traverseFlow(flow, startElementName, visitCallback, endElementName) {
        // Iterative Deepening Depth-First Search (IDDFS)
        let elementsToVisit = [startElementName];
        while (elementsToVisit.length > 0) {
            const nextElements = [];
            for (const elementName of elementsToVisit) {
                if (!this.visitedElements.has(elementName)) {
                    const currentElement = flow.elements.find(element => element instanceof FlowNode_1.FlowNode && element.name === elementName);
                    if (currentElement) {
                        visitCallback(currentElement);
                        this.visitedElements.add(elementName);
                        nextElements.push(...this.findNextElements(flow, currentElement, endElementName));
                    }
                }
            }
            if (nextElements.length === 0) { // If no more next elements
                break; // Terminate the traversal
            }
            elementsToVisit = nextElements;
        }
    }
    findNextElements(flow, currentElement, endElementName) {
        const nextElements = [];
        if (currentElement.connectors && currentElement.connectors.length > 0) {
            for (const connector of currentElement.connectors) {
                if (connector.reference) {
                    // Check if the reference exists in the flow elements
                    const nextElement = flow.elements.find(element => element instanceof FlowNode_1.FlowNode && element.name === connector.reference);
                    if (nextElement instanceof FlowNode_1.FlowNode && nextElement.name !== endElementName) {
                        nextElements.push(nextElement.name);
                    }
                }
            }
        }
        return nextElements;
    }
}
exports.Compiler = Compiler;
//# sourceMappingURL=Compiler.js.map