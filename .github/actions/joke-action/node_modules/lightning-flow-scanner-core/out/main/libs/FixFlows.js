"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FixFlows = void 0;
const BuildFlow_1 = require("./BuildFlow");
const core = __importStar(require("../internals/internals"));
function FixFlows(flow, ruleResults) {
    const unusedVariableRes = ruleResults.find((r) => r.ruleName === 'UnusedVariable');
    const unusedVariableReferences = (unusedVariableRes && unusedVariableRes.details && unusedVariableRes.details.length > 0) ? unusedVariableRes.details.map((d) => d.name) : [];
    const unconnectedElementsRes = ruleResults.find((r) => r.ruleName === 'UnconnectedElement');
    const unconnectedElementsReferences = (unconnectedElementsRes && unconnectedElementsRes.details && unconnectedElementsRes.details.length > 0) ? unconnectedElementsRes.details.map((d) => d.name) : [];
    const nodesToBuild = flow.elements.filter(node => {
        switch (node.metaType) {
            case 'variable':
                const nodeVar = node;
                if (!unusedVariableReferences.includes(nodeVar.name)) {
                    return node;
                }
                break;
            case 'node':
                const nodeElement = node;
                if (!unconnectedElementsReferences.includes(nodeElement.name)) {
                    return node;
                }
                break;
            case 'metadata':
                return node;
            case 'resource':
                return node;
        }
    });
    let xmldata = (0, BuildFlow_1.BuildFlow)(nodesToBuild);
    const newFlow = new core.Flow(flow.fsPath, xmldata);
    return newFlow;
}
exports.FixFlows = FixFlows;
//# sourceMappingURL=FixFlows.js.map