"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RuleParser = void 0;
const ts = __importStar(require("typescript"));
const fs = __importStar(require("fs"));
class RuleParser {
    static parseRuleFile(filePath) {
        const fileContent = fs.readFileSync(filePath, 'utf-8');
        const sourceFile = ts.createSourceFile(filePath, fileContent, ts.ScriptTarget.ESNext);
        let ruleDefinition;
        function visit(node) {
            var _a;
            if (ts.isClassDeclaration(node)) {
                const className = (_a = node.name) === null || _a === void 0 ? void 0 : _a.escapedText;
                if (className) {
                    const methods = node.members.filter(member => ts.isMethodDeclaration(member));
                    const requiredMethods = ['execute'];
                    const methodNames = methods.map(method => { var _a; return (_a = method.name) === null || _a === void 0 ? void 0 : _a['escapedText']; });
                    const implementsMethods = requiredMethods.every(methodName => methods.some(method => methodNames.includes(methodName)));
                    const properties = node.members.filter(member => ts.isPropertyDeclaration(member));
                    const requiredProperties = ['name', 'label', 'description', 'supportedTypes', 'type', 'docRefs', 'isConfigurable'];
                    const propertyNames = properties.map(property => { var _a; return (_a = property.name) === null || _a === void 0 ? void 0 : _a['escapedText']; });
                    const implementsProperties = requiredProperties.every(propertyName => propertyNames.includes(propertyName));
                    if (implementsMethods) {
                        ruleDefinition = RuleParser.extractRuleDefinition(node);
                    }
                }
            }
            ts.forEachChild(node, visit);
        }
        ts.forEachChild(sourceFile, visit);
        return ruleDefinition;
    }
    static extractRuleDefinition(classDeclaration) {
        // Extract relevant information from the class declaration
        // and create an instance of IRuleDefinition
        return null;
    }
}
exports.RuleParser = RuleParser;
//# sourceMappingURL=RuleParser.js.map